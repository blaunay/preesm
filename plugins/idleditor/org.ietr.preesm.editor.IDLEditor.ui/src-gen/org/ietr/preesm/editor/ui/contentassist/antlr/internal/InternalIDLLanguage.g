/*
* generated by Xtext
*/
grammar InternalIDLLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.ietr.preesm.editor.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ietr.preesm.editor.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.ietr.preesm.editor.services.IDLLanguageGrammarAccess;

}

@parser::members {
 
 	private IDLLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(IDLLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleIDL
entryRuleIDL 
:
{ before(grammarAccess.getIDLRule()); }
	 ruleIDL
{ after(grammarAccess.getIDLRule()); } 
	 EOF 
;

// Rule IDL
ruleIDL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIDLAccess().getElementsAssignment()); }
(rule__IDL__ElementsAssignment)
{ after(grammarAccess.getIDLAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataType
entryRuleDataType 
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeAccess().getGroup()); }
(rule__DataType__Group__0)
{ after(grammarAccess.getDataTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterface
entryRuleInterface 
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceAccess().getGroup()); }
(rule__Interface__Group__0)
{ after(grammarAccess.getInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeStar
entryRuleTypeStar 
:
{ before(grammarAccess.getTypeStarRule()); }
	 ruleTypeStar
{ after(grammarAccess.getTypeStarRule()); } 
	 EOF 
;

// Rule TypeStar
ruleTypeStar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeStarAccess().getAlternatives()); }
(rule__TypeStar__Alternatives)
{ after(grammarAccess.getTypeStarAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BaseType
ruleBaseType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseTypeAccess().getAlternatives()); }
(rule__BaseType__Alternatives)
{ after(grammarAccess.getBaseTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule InterfaceName
ruleInterfaceName
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNameAccess().getAlternatives()); }
(rule__InterfaceName__Alternatives)
{ after(grammarAccess.getInterfaceNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Direction
ruleDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
(rule__Direction__Alternatives)
{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DataType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getBtypeAssignment_1_0()); }
(rule__DataType__BtypeAssignment_1_0)
{ after(grammarAccess.getDataTypeAccess().getBtypeAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getCtypeAssignment_1_1()); }
(rule__DataType__CtypeAssignment_1_1)
{ after(grammarAccess.getDataTypeAccess().getCtypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeStar__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeStarAccess().getBtypeAssignment_0()); }
(rule__TypeStar__BtypeAssignment_0)
{ after(grammarAccess.getTypeStarAccess().getBtypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeStarAccess().getCtypeAssignment_1()); }
(rule__TypeStar__CtypeAssignment_1)
{ after(grammarAccess.getTypeStarAccess().getCtypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseTypeAccess().getIntEnumLiteralDeclaration_0()); }
(	'int' 
)
{ after(grammarAccess.getBaseTypeAccess().getIntEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBaseTypeAccess().getLongEnumLiteralDeclaration_1()); }
(	'long' 
)
{ after(grammarAccess.getBaseTypeAccess().getLongEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBaseTypeAccess().getCharEnumLiteralDeclaration_2()); }
(	'char' 
)
{ after(grammarAccess.getBaseTypeAccess().getCharEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNameAccess().getInitEnumLiteralDeclaration_0()); }
(	'init' 
)
{ after(grammarAccess.getInterfaceNameAccess().getInitEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getInterfaceNameAccess().getLoopEnumLiteralDeclaration_1()); }
(	'loop' 
)
{ after(grammarAccess.getInterfaceNameAccess().getLoopEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getInterfaceNameAccess().getEndEnumLiteralDeclaration_2()); }
(	'end' 
)
{ after(grammarAccess.getInterfaceNameAccess().getEndEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getInEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getDirectionAccess().getInEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDirectionAccess().getOutEnumLiteralDeclaration_1()); }
(	'out' 
)
{ after(grammarAccess.getDirectionAccess().getOutEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getModuleKeyword_0()); }

	'module' 

{ after(grammarAccess.getModuleAccess().getModuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameAssignment_1()); }
(rule__Module__NameAssignment_1)
{ after(grammarAccess.getModuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__3__Impl
	rule__Module__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getTypesAssignment_3()); }
(rule__Module__TypesAssignment_3)*
{ after(grammarAccess.getModuleAccess().getTypesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__4__Impl
	rule__Module__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInterfacesAssignment_4()); }
(rule__Module__InterfacesAssignment_4)*
{ after(grammarAccess.getModuleAccess().getInterfacesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__5__Impl
	rule__Module__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getModuleAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__DataType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getTypedefKeyword_0()); }

	'typedef' 

{ after(grammarAccess.getDataTypeAccess().getTypedefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__1__Impl
	rule__DataType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getAlternatives_1()); }
(rule__DataType__Alternatives_1)
{ after(grammarAccess.getDataTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__2__Impl
	rule__DataType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNameAssignment_2()); }
(rule__DataType__NameAssignment_2)
{ after(grammarAccess.getDataTypeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getDataTypeAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Interface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }

	'interface' 

{ after(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__1__Impl
	rule__Interface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
(rule__Interface__NameAssignment_1)
{ after(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__2__Impl
	rule__Interface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__3__Impl
	rule__Interface__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getFunctionAssignment_3()); }
(rule__Interface__FunctionAssignment_3)
{ after(grammarAccess.getInterfaceAccess().getFunctionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__4__Impl
	rule__Interface__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getInterfaceAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getFunctionAccess().getVoidKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3()); }
(rule__Function__ParametersAssignment_3)
{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_4()); }
(rule__Function__Group_4__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Function__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__0__Impl
	rule__Function__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParametersAssignment_4_1()); }
(rule__Function__ParametersAssignment_4_1)
{ after(grammarAccess.getFunctionAccess().getParametersAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDirectionAssignment_0()); }
(rule__Parameter__DirectionAssignment_0)
{ after(grammarAccess.getParameterAccess().getDirectionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__IDL__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDLAccess().getElementsModuleParserRuleCall_0()); }
	ruleModule{ after(grammarAccess.getIDLAccess().getElementsModuleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__TypesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getTypesDataTypeParserRuleCall_3_0()); }
	ruleDataType{ after(grammarAccess.getModuleAccess().getTypesDataTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__InterfacesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInterfacesInterfaceParserRuleCall_4_0()); }
	ruleInterface{ after(grammarAccess.getModuleAccess().getInterfacesInterfaceParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__BtypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getBtypeBaseTypeEnumRuleCall_1_0_0()); }
	ruleBaseType{ after(grammarAccess.getDataTypeAccess().getBtypeBaseTypeEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__CtypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getCtypeDataTypeCrossReference_1_1_0()); }
(
{ before(grammarAccess.getDataTypeAccess().getCtypeDataTypeIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDataTypeAccess().getCtypeDataTypeIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getDataTypeAccess().getCtypeDataTypeCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameInterfaceNameEnumRuleCall_1_0()); }
	ruleInterfaceName{ after(grammarAccess.getInterfaceAccess().getNameInterfaceNameEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__FunctionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getFunctionFunctionParserRuleCall_3_0()); }
	ruleFunction{ after(grammarAccess.getInterfaceAccess().getFunctionFunctionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_0()); }
	ruleParameter{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_4_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__DirectionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDirectionDirectionEnumRuleCall_0_0()); }
	ruleDirection{ after(grammarAccess.getParameterAccess().getDirectionDirectionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeStarParserRuleCall_1_0()); }
	ruleTypeStar{ after(grammarAccess.getParameterAccess().getTypeTypeStarParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeStar__BtypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeStarAccess().getBtypeBaseTypeEnumRuleCall_0_0()); }
	ruleBaseType{ after(grammarAccess.getTypeStarAccess().getBtypeBaseTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeStar__CtypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeStarAccess().getCtypeDataTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getTypeStarAccess().getCtypeDataTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTypeStarAccess().getCtypeDataTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTypeStarAccess().getCtypeDataTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


