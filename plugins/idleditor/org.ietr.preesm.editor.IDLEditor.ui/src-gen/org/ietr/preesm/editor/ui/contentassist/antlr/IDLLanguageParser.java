/*
* generated by Xtext
*/
package org.ietr.preesm.editor.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.ietr.preesm.editor.services.IDLLanguageGrammarAccess;

public class IDLLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private IDLLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.ietr.preesm.editor.ui.contentassist.antlr.internal.InternalIDLLanguageParser createParser() {
		org.ietr.preesm.editor.ui.contentassist.antlr.internal.InternalIDLLanguageParser result = new org.ietr.preesm.editor.ui.contentassist.antlr.internal.InternalIDLLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataTypeAccess().getAlternatives_1(), "rule__DataType__Alternatives_1");
					put(grammarAccess.getTypeStarAccess().getAlternatives(), "rule__TypeStar__Alternatives");
					put(grammarAccess.getBaseTypeAccess().getAlternatives(), "rule__BaseType__Alternatives");
					put(grammarAccess.getInterfaceNameAccess().getAlternatives(), "rule__InterfaceName__Alternatives");
					put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_4(), "rule__Function__Group_4__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getIDLAccess().getElementsAssignment(), "rule__IDL__ElementsAssignment");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getTypesAssignment_3(), "rule__Module__TypesAssignment_3");
					put(grammarAccess.getModuleAccess().getInterfacesAssignment_4(), "rule__Module__InterfacesAssignment_4");
					put(grammarAccess.getDataTypeAccess().getBtypeAssignment_1_0(), "rule__DataType__BtypeAssignment_1_0");
					put(grammarAccess.getDataTypeAccess().getCtypeAssignment_1_1(), "rule__DataType__CtypeAssignment_1_1");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_2(), "rule__DataType__NameAssignment_2");
					put(grammarAccess.getInterfaceAccess().getNameAssignment_1(), "rule__Interface__NameAssignment_1");
					put(grammarAccess.getInterfaceAccess().getFunctionAssignment_3(), "rule__Interface__FunctionAssignment_3");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getParametersAssignment_3(), "rule__Function__ParametersAssignment_3");
					put(grammarAccess.getFunctionAccess().getParametersAssignment_4_1(), "rule__Function__ParametersAssignment_4_1");
					put(grammarAccess.getParameterAccess().getDirectionAssignment_0(), "rule__Parameter__DirectionAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
					put(grammarAccess.getTypeStarAccess().getBtypeAssignment_0(), "rule__TypeStar__BtypeAssignment_0");
					put(grammarAccess.getTypeStarAccess().getCtypeAssignment_1(), "rule__TypeStar__CtypeAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.ietr.preesm.editor.ui.contentassist.antlr.internal.InternalIDLLanguageParser typedParser = (org.ietr.preesm.editor.ui.contentassist.antlr.internal.InternalIDLLanguageParser) parser;
			typedParser.entryRuleIDL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public IDLLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(IDLLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
