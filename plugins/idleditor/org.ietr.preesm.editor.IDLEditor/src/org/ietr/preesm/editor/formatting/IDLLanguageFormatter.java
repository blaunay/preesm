/*
 * generated by Xtext
 */
package org.ietr.preesm.editor.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.ietr.preesm.editor.services.IDLLanguageGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class IDLLanguageFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		
		IDLLanguageGrammarAccess f = (IDLLanguageGrammarAccess)getGrammarAccess();
// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
		
		c.setLinewrap().before(f.getModuleRule());
		c.setLinewrap().before(f.getDataTypeRule());
		c.setLinewrap().before(f.getInterfaceRule());
		c.setLinewrap().before(f.getFunctionRule());
		

	    c.setIndentationIncrement().after(
	        f.getModuleAccess().getLeftCurlyBracketKeyword_2());
	    c.setIndentationDecrement().before(
	        f.getModuleAccess().getRightCurlyBracketKeyword_5());

	    c.setIndentationIncrement().after(
	        f.getInterfaceAccess().getLeftCurlyBracketKeyword_2());
	    c.setIndentationDecrement().before(
	        f.getInterfaceAccess().getRightCurlyBracketKeyword_4());
	    
		c.setLinewrap().before(f.getModuleAccess().getRightCurlyBracketKeyword_5());
		c.setLinewrap().before(f.getInterfaceAccess().getRightCurlyBracketKeyword_4());
		
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
	}
}
