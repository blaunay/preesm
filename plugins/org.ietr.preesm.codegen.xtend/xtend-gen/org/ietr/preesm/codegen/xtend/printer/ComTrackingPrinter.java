/**
 * Copyright or © or Copr. IETR/INSA: Maxime Pelcat, Jean-François Nezan,
 * Karol Desnos, Julien Heulot
 * 
 * [mpelcat,jnezan,kdesnos,jheulot]@insa-rennes.fr
 * 
 * This software is a computer program whose purpose is to prototype
 * parallel applications.
 * 
 * This software is governed by the CeCILL-C license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL-C
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * 
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * 
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
package org.ietr.preesm.codegen.xtend.printer;

import com.google.common.base.Objects;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.ietr.preesm.codegen.xtend.model.codegen.Buffer;
import org.ietr.preesm.codegen.xtend.model.codegen.Communication;
import org.ietr.preesm.codegen.xtend.model.codegen.CoreBlock;
import org.ietr.preesm.codegen.xtend.model.codegen.Delimiter;
import org.ietr.preesm.codegen.xtend.model.codegen.Direction;
import org.ietr.preesm.codegen.xtend.model.codegen.SharedMemoryCommunication;
import org.ietr.preesm.codegen.xtend.printer.DefaultPrinter;

/**
 * This {@link ComTrackingPrinter} is a dummy implementation of the
 * {@link DefaultPrinter} where all print methods print nothing
 * except for communications. The goal is to track the order of communication
 * calls for debug purpose.
 * @author mpelcat
 */
@SuppressWarnings("all")
public class ComTrackingPrinter extends DefaultPrinter {
  public CharSequence printCoreBlockHeader(final CoreBlock block) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/** ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file ");
    String _name = block.getName();
    _builder.append(_name, " ");
    _builder.append(".txt");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @generated by ");
    Class<? extends ComTrackingPrinter> _class = this.getClass();
    String _simpleName = _class.getSimpleName();
    _builder.append(_simpleName, " ");
    _builder.append(" to check communications");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Printing reports for communications.
   * @see CodegenAbstractPrinter#preProcessing(List,List)
   */
  public CharSequence printSharedMemoryCommunication(final SharedMemoryCommunication communication) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Delimiter _delimiter = communication.getDelimiter();
      boolean _equals = Objects.equal(_delimiter, Delimiter.START);
      if (_equals) {
        {
          Direction _direction = communication.getDirection();
          boolean _equals_1 = Objects.equal(_direction, Direction.SEND);
          if (_equals_1) {
            _builder.append("send");
          } else {
            Direction _direction_1 = communication.getDirection();
            boolean _equals_2 = Objects.equal(_direction_1, Direction.RECEIVE);
            if (_equals_2) {
              _builder.append("recv");
            }
          }
        }
        _builder.append("(");
        Communication _sendStart = communication.getSendStart();
        CoreBlock _coreContainer = _sendStart.getCoreContainer();
        String _name = _coreContainer.getName();
        _builder.append(_name, "");
        _builder.append("->");
        Communication _receiveStart = communication.getReceiveStart();
        CoreBlock _coreContainer_1 = _receiveStart.getCoreContainer();
        String _name_1 = _coreContainer_1.getName();
        _builder.append(_name_1, "");
        _builder.append(") com ");
        int _id = communication.getId();
        _builder.append(_id, "");
        _builder.append(" ");
        Buffer _data = communication.getData();
        String _name_2 = _data.getName();
        _builder.append(_name_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
