/**
 * Copyright or © or Copr. IETR/INSA: Maxime Pelcat, Jean-François Nezan,
 * Karol Desnos, Julien Heulot
 * 
 * [mpelcat,jnezan,kdesnos,jheulot]@insa-rennes.fr
 * 
 * This software is a computer program whose purpose is to prototype
 * parallel applications.
 * 
 * This software is governed by the CeCILL-C license under French law and
 * abiding by the rules of distribution of free software.  You can  use, 
 * modify and/ or redistribute the software under the terms of the CeCILL-C
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info". 
 * 
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability. 
 * 
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or 
 * data to be ensured and,  more generally, to use and operate it in the 
 * same conditions as regards security. 
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
package org.ietr.preesm.codegen.xtend.printer

import java.util.Date
import org.ietr.preesm.codegen.xtend.model.codegen.CoreBlock
import org.ietr.preesm.codegen.xtend.task.CodegenException
import java.util.List
import org.ietr.preesm.codegen.xtend.model.codegen.Variable
import org.ietr.preesm.codegen.xtend.model.codegen.Buffer
import org.ietr.preesm.codegen.xtend.model.codegen.SubBuffer
import org.ietr.preesm.codegen.xtend.model.codegen.CallBlock
import org.ietr.preesm.codegen.xtend.model.codegen.LoopBlock
import org.ietr.preesm.codegen.xtend.model.codegen.FifoCall
import org.ietr.preesm.codegen.xtend.model.codegen.FifoOperation
import org.ietr.preesm.codegen.xtend.model.codegen.FunctionCall
import org.ietr.preesm.codegen.xtend.model.codegen.SpecialCall

/**
 * This printer is currently used to print C code only for X86 processor with
 * shared memory communication.
 * 
 * @author kdesnos
 */
class CPrinter extends DefaultPrinter {

	override caseCoreBlock(CoreBlock coreBlock) {
		if (coreBlock.coreType != "x86") {
			throw new CodegenException("Core "+ coreBlock.name +
				 " has an unsupported type " +	coreBlock.coreType + 
				 " for the " + this.class.name + " printer")
		}
		super.caseCoreBlock(coreBlock)
	}

	override printCoreBlockHeader(CoreBlock block) '''
		«IF block.coreType == "x86"»
			/** 
			 * @file «block.name».c
			 * @generated by «this.class.simpleName»
			 * @date «new Date»
			 */
			
			#include "x86.h"
			
			
		«ENDIF»
	'''
	
	override printDefinitionsHeader(List<Variable> list) '''
	«IF !list.empty»
		// Core Global Definitions
		
	«ENDIF»
	'''
	
	override printBufferDefinition(Buffer buffer) '''
	«buffer.type» «buffer.name»[«buffer.size»]; // «buffer.comment» size:= «buffer.size»*«buffer.type»
	'''
	
	override printSubBufferDefinition(SubBuffer buffer) '''
	«buffer.type» *const «buffer.name» = («buffer.type»*) «buffer.container.name»+«buffer.offset»;  // «buffer.comment» size:= «buffer.size»*«buffer.type»
	'''
	
	override printDefinitionsFooter(List<Variable> list) '''
	«IF !list.empty»
	
	«ENDIF»
	'''
	
	override printDeclarationsHeader(List<Variable> list) '''
	«IF !list.empty»
		// Core Global Declaration
		
	«ENDIF»
	'''
	
	override printBufferDeclaration(Buffer buffer) '''
	extern «printBufferDefinition(buffer)»
	'''
	
	override printSubBufferDeclaration(SubBuffer buffer) '''
	extern «printSubBufferDefinition(buffer).toString.trim/*Trimed to remove EOL*/» defined in «buffer.creator.name»
	'''
	
	override printDeclarationsFooter(List<Variable> list) '''
	«IF !list.empty»
	
	«ENDIF»
	'''
	
	override printCoreInitBlockHeader(CallBlock callBlock) '''
	void *computationThread_«(callBlock.eContainer as CoreBlock).name»(void *arg){
		«IF !callBlock.codeElts.empty»
			// Initialisation(s)
			
		«ENDIF»
	'''
	
	override printCoreLoopBlockHeader(LoopBlock block2) '''
		
		«"\t"»// Begin the execution loop 
			while(1){
				
	'''
	
	
	override printCoreLoopBlockFooter(LoopBlock block2) '''
		}
	}
	'''	
	override printFifoCall(FifoCall fifoCall) {
		var result = new String
		switch fifoCall.operation {
			case FifoOperation::INIT: result = "fifo_new"
			case FifoOperation::POP: result = "fifo_pop"
			case FifoOperation::PUSH: result = "fifo_push"
		}
	
		result = result +
			'''(«fifoCall.storageBuffer.name»,'''
		result = result + if( fifoCall.operation == FifoOperation::INIT) {
			'''sizeof(«fifoCall.storageBuffer.type»), «fifoCall.storageBuffer.size»);
			'''
		} else {
			var buffer = fifoCall.parameters.head as Buffer
			'''«buffer.doSwitch», «buffer.size»*sizeof(«buffer.type»));
			'''
		}
	}
	
	override printFork(SpecialCall call) '''
	// Fork «call.name»«var input = call.inputBuffers.head»«var index = 0»
	{
		«FOR output : call.outputBuffers»
			memcpy(«output.doSwitch», «input.doSwitch»+«index», «output.size»*sizeof(«output.type»));«{index=(output.size+index); ""}»
		«ENDFOR»
	}
	'''
	
	override printBroadcast(SpecialCall call) '''
	// Broadcast «call.name»«var input = call.inputBuffers.head»«var index = 0»
	{
		«FOR output : call.outputBuffers»
			memcpy(«output.doSwitch», «input.doSwitch»+«index», «output.size»*sizeof(«output.type»));«{index=(output.size+index)%input.size; ""}»
		«ENDFOR»
	}
	'''
	
	override printJoin(SpecialCall call) '''
	// Join «call.name»«var output = call.outputBuffers.head»«var index = 0»
	{
		«FOR input : call.inputBuffers»
			memcpy(«output.doSwitch»+«index», «input.doSwitch», «input.size»*sizeof(«input.type»));«{index=(input.size+index); ""}»
		«ENDFOR»
	}
	'''
	
	override printFunctionCall(FunctionCall functionCall) '''
	«functionCall.name»(«FOR param : functionCall.parameters SEPARATOR ','»«param.doSwitch»«ENDFOR»); // «functionCall.actorName»
	'''

	override printBuffer(Buffer buffer) '''«buffer.name»'''
	
	override printSubBuffer(SubBuffer buffer) {printBuffer(buffer)}
}
