/**
 * 
 */
package org.ietr.preesm.plugin.mapper.fastalgo;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.ietr.preesm.core.architecture.Examples;
import org.ietr.preesm.core.architecture.IArchitecture;
import org.ietr.preesm.core.architecture.MultiCoreArchitecture;
import org.ietr.preesm.core.log.PreesmLogger;
import org.ietr.preesm.plugin.abc.AbstractAbc;
import org.ietr.preesm.plugin.abc.ArchitectureSimulatorType;
import org.ietr.preesm.plugin.abc.IAbc;
import org.ietr.preesm.plugin.abc.infinitehomogeneous.InfiniteHomogeneousAbc;
import org.ietr.preesm.plugin.mapper.graphtransfo.DAGCreator;
import org.ietr.preesm.plugin.mapper.model.MapperDAG;

/**
 * Population for genetic algorithm generated by FAST algorithm
 * 
 * @author pmenuet
 */
public class FastPopulation {

	// Number of individual in the population
	private int populationNum;

	// List of mapperDAG constituting the population
	private List<MapperDAG> population;

	// Simulator used to make this population
	private ArchitectureSimulatorType simulatorType;

	// architecture used to make this population
	private IArchitecture archi;

	/**
	 * Constructors
	 */

	public FastPopulation() {
		super();

	}

	/**
	 * @param populationNum
	 * @param simulatorType
	 * @param archi
	 */
	public FastPopulation(int populationNum,
			ArchitectureSimulatorType simulatorType, IArchitecture archi) {
		super();
		this.populationNum = populationNum;
		this.simulatorType = simulatorType;
		this.archi = archi;
		this.population = new ArrayList<MapperDAG>();
	}

	/**
	 * @param populationNum
	 * @param population
	 * @param simulatorType
	 * @param archi
	 */
	public FastPopulation(int populationNum, List<MapperDAG> population,
			ArchitectureSimulatorType simulatorType, IArchitecture archi) {
		super();
		this.populationNum = populationNum;
		this.population = population;
		this.simulatorType = simulatorType;
		this.archi = archi;
	}

	/**
	 * Getters and setters
	 */

	public ArchitectureSimulatorType getSimulatorType() {
		return simulatorType;
	}

	public void setSimulatorType(ArchitectureSimulatorType simulatorType) {
		this.simulatorType = simulatorType;
	}

	public IArchitecture getArchi() {
		return archi;
	}

	public void setArchi(IArchitecture archi) {
		this.archi = archi;
	}

	public int getPopulationNum() {
		return populationNum;
	}

	public void setPopulationNum(int populationNum) {
		this.populationNum = populationNum;
	}

	public List<MapperDAG> getPopulation() {
		return population;
	}

	public void setPopulation(List<MapperDAG> population) {
		this.population = population;
	}

	/**
	 * constructPopulation = run the fast algorithm as many times it is
	 * necessary to make the population
	 * 
	 * @param dag
	 * @param MAXCOUNT
	 * @param MAXSTEP
	 * @param MARGIN
	 */
	public void constructPopulation(MapperDAG dag, int MAXCOUNT, int MAXSTEP,
			int MARGIN) {

		// create the population
		List<MapperDAG> temp = new ArrayList<MapperDAG>();

		// PopulationNum times
		for (int i = 0; i < this.getPopulationNum(); i++) {

			MapperDAG tempdag = null;
			tempdag = dag.clone();

			// perform the initialization
			IAbc simu = new InfiniteHomogeneousAbc(
					tempdag, this.getArchi());
			InitialLists initial = new InitialLists();
			initial.constructInitialLists(tempdag, simu);
			simu.resetDAG();

			// perform the fast algo
			FastAlgorithm algorithm = new FastAlgorithm();
			tempdag = algorithm.map("population", this.simulatorType, tempdag,
					this.archi, initial.getCpnDominantList(),
					initial.getBlockingNodesList(),
					initial.getFinalcriticalpathList(), MAXCOUNT, MAXSTEP,
					MARGIN, false, true, null).clone();
			temp.add(tempdag.clone());

		}
		this.population.addAll(temp);
	}

	/**
	 * Display the population found with the preceding function
	 */
	public void populationDisplay() {

		// variables
		Logger logger = PreesmLogger.getLogger();
		logger.setLevel(Level.FINEST);
		ListScheduler scheduler = new ListScheduler();
		Iterator<MapperDAG> iterator = this.getPopulation().iterator();
		MapperDAG temp;

		// implant the DAG in a simulator and then display it
		while (iterator.hasNext()) {
			temp = iterator.next().clone();
			IAbc simu2 = AbstractAbc
					.getInstance(this.getSimulatorType(), temp, this.getArchi());

			scheduler.dagimplanteddisplay(temp, simu2);
			simu2.setDAG(temp);
			simu2.plotImplementation();
			simu2.resetDAG();

		}

	}

	/**
	 * main for test
	 */
	public static void main(String[] args) {

		DAGCreator dagCreator = new DAGCreator();
		MultiCoreArchitecture archi = Examples.get4C64Archi();
		MapperDAG dag = dagCreator.dagexample2(archi);

		FastPopulation population = new FastPopulation(5,
				ArchitectureSimulatorType.LooselyTimed, archi);
		population.constructPopulation(dag, 20, 10, 3);
		population.populationDisplay();

	}
}
