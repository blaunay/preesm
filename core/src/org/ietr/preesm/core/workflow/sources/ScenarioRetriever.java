/**
 * 
 */
package org.ietr.preesm.core.workflow.sources;

import java.util.Iterator;

import org.ietr.preesm.core.architecture.IArchitecture;
import org.ietr.preesm.core.architecture.OperatorDefinition;
import org.ietr.preesm.core.constraints.IScenario;
import org.ietr.preesm.core.constraints.Scenario;
import org.ietr.preesm.core.constraints.Timing;
import org.ietr.preesm.core.constraints.TimingManager;
import org.sdf4j.model.sdf.SDFAbstractVertex;
import org.sdf4j.model.sdf.SDFGraph;

/**
 * @author mpelcat
 * 
 */
public class ScenarioRetriever {

	/**
	 * Generates a scenario adapted to algorithms generated by
	 * {@link AlgorithmRetriever}RandomDAG() method
	 */
	public static IScenario RandomScenario(SDFGraph dag,
			IArchitecture archi) {

		// Generating scenario
		IScenario localScenario = new Scenario();

		TimingManager tmgr = localScenario.getTimingManager();

		Iterator<SDFAbstractVertex> it = dag.vertexSet().iterator();
		while (it.hasNext()) {
			SDFAbstractVertex vertex = it.next();
			Timing newt = new Timing((OperatorDefinition) archi
					.getMainOperator().getDefinition(), vertex, 100);
			tmgr.addTiming(newt);
		}

		return localScenario;
	}

	IScenario scenario = null;

	public ScenarioRetriever(ScenarioConfiguration scenarioConfiguration) {
		super();

	}

	public IScenario getScenario() {
		return scenario;
	}
}
