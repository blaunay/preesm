/*
 * Copyright (c) 2011, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Author: mpelcat (mpelcat@insa-rennes.fr)
// Author: kdesnos (kdesnos@insa-rennes.fr)
// Stupid actor that generates data

package org.ietr.sobel.sdf;

actor Generator (int param) ==> int(size=32) data :
	// An initialization procedure with an output
	init_function: initialize ==> data:[d] repeat 64
	var
		int(size=32) d [64] 
	do
		print("Generator launched param:" + param);
		foreach int(size=32) i in 0 .. 63 do
			d[i] := 1;
		end
	end
 
	// A test function
	function f() --> int(size=32) :
		param
	end 
	
	// A test procedure
	procedure proc(int(size=32) tab [ 128 ])
	begin
		foreach int(size=32) i in 0 .. 127 do
			tab[i] := f();
		end
	end
	
	// Dummy action
	generate: action ==> data:[ d ] repeat 128
	var
		int(size=32) d [ 128 ]
	do
		proc(d);
	end

end